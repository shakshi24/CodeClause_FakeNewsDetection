# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uEWbMLMq8pHTqmhWZ2BKy7zvQWRpV5NN
"""

# importing libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report

import re
import string

# reading the csv dataset from kaggle
df=pd.read_csv('FakeNewsNet.csv')

df.shape # no. of rows and columns

df=df.sample(frac=1) # random sampling

df.drop(['news_url','source_domain','tweet_num'], axis=1) # deleting some columns

def wordopt (title):
  title = title.lower()
  title = re.sub("\\W", " ", title)
  title = re.sub('\[.*?\]', '', title)
  title = re.sub('https?://\S+|www\.\S+', '', title)
  title = re.sub('<.*>>+', '', title)
  title = re.sub('[%s]' % re.escape(string.punctuation), '', title)
  title = re.sub('\n', '', title)
  title = re.sub('\w*\d\w*', '', title)
  return title

df['title'] = df['title'].apply(wordopt)

x=df['title']
y=df['real']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25)

from sklearn.feature_extraction.text import TfidfVectorizer
vectorization = TfidfVectorizer()
xv_train = vectorization.fit_transform(x_train)
xv_test = vectorization.transform(x_test)

"""I have used 3 ML models/Classifiers
1. Logistic Regression
2. Gradient Boosting
3. Random Forest
"""

from sklearn.linear_model import LogisticRegression
LR = LogisticRegression()
LR.fit(xv_train, y_train)

pred_lr = LR.predict(xv_test)

LR.score(xv_test, y_test)

print(classification_report(y_test, pred_lr))

from sklearn.ensemble import GradientBoostingClassifier
GB = GradientBoostingClassifier(random_state = 0)
GB.fit(xv_train, y_train)

pred_gb = GB.predict(xv_test)

GB. score(xv_test, y_test)

print(classification_report(y_test, pred_lr))

from sklearn.ensemble import RandomForestClassifier
RF = RandomForestClassifier(random_state = 0)
RF.fit(xv_train, y_train)

pred_rf = RF.predict(xv_test)

RF.score(xv_test, y_test)

print(classification_report(y_test, pred_rf))

def output_lable(n):
  if n == 0:
    return "Fake News"
  elif n == 1:
    return "Not A Fake News"

def manual_testing(news):
  testing_news = {"title":[news]}
  new_def_test = pd.DataFrame(testing_news)
  new_def_test["title"] = new_def_test["title"].apply(wordopt)
  new_x_test = new_def_test["title"]
  new_xv_test = vectorization.transform(new_x_test)
  pred_LR = LR.predict(new_xv_test)
  pred_GB = GB.predict(new_xv_test)
  pred_RF = RF.predict(new_xv_test)

  return print("\n\nLR Prediction: {} \nGBC Prediction: {}  \nRFC Prediction: {}".format(output_lable(pred_LR[0]),output_lable(pred_GB[0]),output_lable(pred_RF[0])))

news = str(input())
manual_testing(news)

